{
  "python": {
    "binary search": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",

    "dfs graph": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start)\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)"
  },
  "cpp": {
    "binary search": "int binarySearch(int arr[], int n, int x) {\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int m = l + (r - l) / 2;\n        if (arr[m] == x) return m;\n        if (arr[m] < x) l = m + 1;\n        else r = m - 1;\n    }\n    return -1;\n}",

    "dfs graph": "void DFS(vector<int> adj[], int v, vector<bool>& visited) {\n    visited[v] = true;\n    cout << v << \" \";\n    for (auto u : adj[v]) {\n        if (!visited[u])\n            DFS(adj, u, visited);\n    }\n}"
  }
}
